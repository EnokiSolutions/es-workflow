#!/bin/bash

for f in $(compgen -A function | egrep "^_?wf")
do
 unset -f $f
done

function _wf-branch-prefix {
  b=$1
  rx="(([a-zA-Z]+[0-9]+)+)\."
  if [[ $b =~ $rx ]]
  then
    echo ${BASH_REMATCH[1]}
  else
    echo $b
  fi
}

function _wf-is-project-branch {
  b=$1
  rx="^[a-zA-Z]+[0-9]+\." 
  if [[ $b =~ $rx ]]
  then
    echo 1
  else
    echo 0
  fi
}

function _wf-git-root-dir {
  d=$(pwd)
  while :
  do
    if [ -d "${d}/.git" ]
    then
      echo $d
      return
    fi
    d=$(dirname $d)
    if [ "/" == "$d" ]
    then
      return
    fi
  done
}

function _wf-update-minor-version {
  v=$1
  rx="^([0-9]+)\.([0-9]+)\.([0-9+])"
  if [[ $v =~ $rx ]]
  then
    major=${BASH_REMATCH[1]}
    minor=${BASH_REMATCH[2]}
    patch=${BASH_REMATCH[3]}
    minor=$(expr $minor + 1)
    echo "$major.$minor.$patch"
  fi
}

function _wf-version-update {
  cb=$(_wf-current-branch)
  pb=$(_wf-is-project-branch $cb)
  if [ $pb != 1 ]
  then
    return
  fi
  mv=$(git show master:version.txt)
  mvu=$(_wf-update-minor-version $mv)
  if [ -z $mvu ]
  then
    return
  fi
  vfile="$(_wf-git-root-dir)/version.txt"
  v=$(cat $vfile)
  if [ "$v" == "$mvu" ]
  then
    return
  fi
  echo $mvu > $vfile
  git add $vfile
  git commit -m"update version to $mvu"
}


function _wf-branch-parent-prefix {
  b=$1
  rx="(([a-zA-Z]+[0-9]+)+)[a-zA-Z]+[0-9]+\." 
  if [[ $b =~ $rx ]]
  then
    echo ${BASH_REMATCH[1]}
  else
    echo "master"
  fi
}

function _wf-current-branch {
  cb=$(git branch | grep '*')
  echo ${cb:2}
}

function _wf-branches {
  bs=$(git branch)
  bs=${bs/\*/} # remove *
  bs=${bs/  / } # compress spaces
  bs=${bs/# /} # remove leading space
  bs=${bs/% /} # remove trailing space
  echo ${bs}
}

function _wf-branch-for-prefix {
  prefix="$1."
  prefixLen=${#prefix}
  for b in $(_wf-branches)
  do
    if [ $prefix == ${b:0:$prefixLen} ]
    then
      echo $b
      return
    fi
  done
  echo "master"
}

function wf-new-branch {
  toCreate=$1
  currentBranch=$(_wf-current-branch)

  prefix=$(_wf-branch-prefix ${currentBranch})
  parentPrefix=$(_wf-branch-parent-prefix ${toCreate})

  if [ ${prefix} != ${parentPrefix} ]
  then
    echo "switch to parent branch $(_wf-branch-for-prefix ${parentPrefix}) before creating child branch"
    return
  fi

  git fetch -p || return
  git merge --ff-only origin/${currentBranch} ${currentBranch} || return
  git branch ${toCreate} || return
  git checkout ${toCreate} || return
  _wf-version-update
  git push --set-upstream origin ${toCreate}
}

function wf-merge-up {
  toMergeUp=$(_wf-branch-for-prefix $1)
  currentBranch=$(_wf-current-branch)

  prefix=$(_wf-branch-prefix ${currentBranch})
  parentPrefix=$(_wf-branch-parent-prefix ${toMergeUp})

  if [ ${prefix} != ${parentPrefix} ]
  then
    echo "switch to parent branch ${parentPrefix} before merging up child branch"
    return
  fi

  git fetch -p || return
  git merge --ff-only origin/${currentBranch} ${currentBranch} || return
  git merge --ff-only ${toMergeUp} || return
  git push || return
  git push origin :${toMergeUp} || return
  git branch -d ${toMergeUp}
}

function wf-merge-down {
  currentBranch=$(_wf-current-branch)
  parentBranchPrefix=$(_wf-branch-parent-prefix ${currentBranch})
  parentBranch=$(_wf-branch-for-prefix ${parentBranchPrefix})

  git fetch -p || return
  git merge --ff-only origin/${parentBranch} ${parentBranch} || return
  git merge --ff-only origin/${currentBranch} ${currentBranch} || return
  git merge ${parentBranch}
  _wf-version-update
}

function wf-initial-setup {
  if [ -e .gitignore ]
  then
    echo "looks like something is already here..."
    return
  fi
  name=$1
  if [ -z $name ]
  then
    echo "wf-initial-setup <name>"
    return
  fi
cat <<HERE >.gitignore
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# vsg will create these
*.sln
*.csproj

# User-specific files
*.suo
*.user
*.sln.docstates

# Build results

[Dd]ebug/
[Rr]elease/
x64/
build/
[Bb]in/
[Oo]bj/

packages/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

*_i.c
*_p.c
*.ilk
*.meta
*.obj
*.pch
*.pdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.log
*.scc

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opensdf
*.sdf
*.cachefile

# Visual Studio profiler
*.psess
*.vsp
*.vspx

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# NCrunch
*.ncrunch*
.*crunch*.local.xml

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.Publish.xml

# Windows Azure Build Output
csx
*.build.csdef

# Windows Store app package directory
AppPackages/

# Others
sql/
*.Cache
ClientBin/
[Ss]tyle[Cc]op.*
~\$*
*~
*.dbmdl
*.[Pp]ublish.xml
*.pfx
*.publishsettings

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file to a newer
# Visual Studio version. Backup files are not needed, because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# SQL Server files
App_Data/*.mdf
App_Data/*.ldf


#LightSwitch generated files
GeneratedArtifacts/
_Pvt_Extensions/
ModelManifest.xml

# =========================
# Windows detritus
# =========================

# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
\$RECYCLE.BIN/

# Mac desktop service store files
.DS_Store
HERE
  cat <<HERE >sln.vsg
{
  "name": "$name",
  "packages":[
    ["NUnit","2.6.4"]
  ]
}
HERE
  cat <<HERE >build.tcg
{
  "name":"$name"
}
HERE
  echo "0.0.0" > version.txt
  mkdir $name
  cat <<HERE > $name/csproj.vsg
{
  "refs":[
  "System",
  "System.Core"
  ]
}
HERE
  echo "{}" > $name/pack.nup
  mkdir ${name}.Test
  cat <<HERE > ${name}.Test/csproj.vsg
{
  "refs":[
  "${name}",
  "nunit.framework",
  "System",
  "System.Core"
  ]
}
HERE

}
